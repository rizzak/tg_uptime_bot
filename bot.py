from aiogram import Bot, Dispatcher
from aiogram.types import Message
from aiogram.filters import Command
import asyncio
from dotenv import load_dotenv
import os
import logging
from uptime_kuma_client import UptimeKumaClient
from db_manager import DBManager, UserRole
from typing import Optional

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s'
)
logger = logging.getLogger(__name__)

load_dotenv(override=True)  # –ó–∞–≥—Ä—É–∑–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è –∏–∑ .env —Å –ø–µ—Ä–µ–∑–∞–ø–∏—Å—å—é

# –ü–æ–ª—É—á–µ–Ω–∏–µ –Ω–∞—Å—Ç—Ä–æ–µ–∫ –∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
API_TOKEN = os.getenv('TELEGRAM_BOT_TOKEN')

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞ –∏ –¥–∏—Å–ø–µ—Ç—á–µ—Ä–∞
bot = Bot(token=API_TOKEN)
dp = Dispatcher()
db_manager = DBManager()

# –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç—É–ø–∞
async def is_authorized(message: Message) -> bool:
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç, –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –±–æ—Ç–∞ (–Ω–µ –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω –ª–∏ –æ–Ω)"""
    user_id = message.from_user.id
    user_info = db_manager.get_user(user_id)

    if user_info and user_info['role'] != UserRole.BLOCKED:
        # –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–∞–π–¥–µ–Ω –≤ –ë–î –∏ –Ω–µ –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω
        return True
    
    # –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω –∏–ª–∏ –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω
    await message.answer("–£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–º—É –±–æ—Ç—É.")
    return False

@dp.message(Command(commands=['start', 'help']))
async def send_welcome(message: Message):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥ /start –∏ /help"""
    if not await is_authorized(message):
        return
    
    await message.answer(
        "üëã –ü—Ä–∏–≤–µ—Ç! –Ø –±–æ—Ç –¥–ª—è –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ Uptime Kuma.\n\n"
        "–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:\n"
        "/status - –ü–æ–ª—É—á–∏—Ç—å –æ–±—â–∏–π —Å—Ç–∞—Ç—É—Å –≤—Å–µ—Ö —Å–µ—Ä–≤–∏—Å–æ–≤\n"
        "/monitors - –ü–æ–∫–∞–∑–∞—Ç—å —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –º–æ–Ω–∏—Ç–æ—Ä–æ–≤\n"
        "/incidents - –ü–æ–∫–∞–∑–∞—Ç—å —Å–ø–∏—Å–æ–∫ –∏–Ω—Ü–∏–¥–µ–Ω—Ç–æ–≤"
    )

@dp.message(Command(commands=['status']))
async def get_status(message: Message):
    """–ü–æ–ª—É—á–µ–Ω–∏–µ –æ–±—â–µ–≥–æ —Å—Ç–∞—Ç—É—Å–∞ –≤—Å–µ—Ö —Å–µ—Ä–≤–∏—Å–æ–≤"""
    if not await is_authorized(message):
        return
    
    await message.answer("üîç –ü–æ–ª—É—á–∞—é —Å—Ç–∞—Ç—É—Å —Å–µ—Ä–≤–∏—Å–æ–≤...")
    
    try:
        async with asyncio.timeout(30):
            logger.info("–°–æ–∑–¥–∞–Ω–∏–µ —ç–∫–∑–µ–º–ø–ª—è—Ä–∞ UptimeKumaClient...")
            async with UptimeKumaClient() as client:
                logger.info("–≠–∫–∑–µ–º–ø–ª—è—Ä UptimeKumaClient —Å–æ–∑–¥–∞–Ω. –í—ã–∑–æ–≤ get_status_summary...")
                summary = await client.get_status_summary()
                logger.info("–ü–æ–ª—É—á–µ–Ω –æ—Ç–≤–µ—Ç –æ—Ç get_status_summary.")
                
                response = f"üìä –°—Ç–∞—Ç—É—Å —Å–µ—Ä–≤–∏—Å–æ–≤:\n\n"
                response += f"–í—Å–µ–≥–æ: {summary['total']}\n"
                response += f"‚úÖ –†–∞–±–æ—Ç–∞—é—Ç: {summary['up']}\n"
                response += f"‚ùå –ù–µ —Ä–∞–±–æ—Ç–∞—é—Ç: {summary['down']}\n"
                response += f"üîß –ù–∞ –æ–±—Å–ª—É–∂–∏–≤–∞–Ω–∏–∏: {summary['maintenance']}\n"
                response += f"üìà Uptime: {summary['uptime']}%\n"
                
                # –ï—Å–ª–∏ –µ—Å—Ç—å –Ω–µ—Ä–∞–±–æ—Ç–∞—é—â–∏–µ —Å–µ—Ä–≤–∏—Å—ã, –ø–æ–∫–∞–∂–µ–º –∏—Ö
                if summary['down'] > 0:
                    response += "\n‚ö†Ô∏è –°–µ—Ä–≤–∏—Å—ã —Å –ø—Ä–æ–±–ª–µ–º–∞–º–∏:\n"
                    
                    # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –º–æ–Ω–∏—Ç–æ—Ä–æ–≤
                    monitors = await client.get_monitors()
                    for monitor in monitors:
                        if monitor['status'] == 0 and monitor['active'] and not monitor['maintenance']:
                            response += f"- {monitor['name']}\n"
                
                await message.answer(response)
    except asyncio.TimeoutError:
        logger.error("–¢–∞–π–º–∞—É—Ç –ø—Ä–∏ –æ–±—Ä–∞—â–µ–Ω–∏–∏ –∫ Uptime Kuma")
        await message.answer("üïí –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –æ—Ç–≤–µ—Ç –æ—Ç Uptime Kuma –≤–æ–≤—Ä–µ–º—è. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–∞–±–æ—Ç–µ —Å Uptime Kuma: {e}")
        await message.answer(f"‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–≤—è–∑–∏ —Å Uptime Kuma: {str(e)}")

@dp.message(Command(commands=['monitors']))
async def list_monitors(message: Message):
    """–ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –≤—Å–µ—Ö –º–æ–Ω–∏—Ç–æ—Ä–æ–≤"""
    if not await is_authorized(message):
        return
    
    await message.answer("üîç –ü–æ–ª—É—á–∞—é —Å–ø–∏—Å–æ–∫ –º–æ–Ω–∏—Ç–æ—Ä–æ–≤...")
    
    try:
        async with asyncio.timeout(30):
            logger.info("–°–æ–∑–¥–∞–Ω–∏–µ —ç–∫–∑–µ–º–ø–ª—è—Ä–∞ UptimeKumaClient...")
            async with UptimeKumaClient() as client:
                logger.info("–≠–∫–∑–µ–º–ø–ª—è—Ä UptimeKumaClient —Å–æ–∑–¥–∞–Ω. –í—ã–∑–æ–≤ get_monitors...")
                monitors = await client.get_monitors()
                logger.info("–ü–æ–ª—É—á–µ–Ω –æ—Ç–≤–µ—Ç –æ—Ç get_monitors.")
                
                if not monitors:
                    await message.answer("‚ùó –ú–æ–Ω–∏—Ç–æ—Ä—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã.")
                    return
                
                response = "üìã –°–ø–∏—Å–æ–∫ –º–æ–Ω–∏—Ç–æ—Ä–æ–≤:\n\n"
                
                for monitor in monitors:
                    status_emoji = "‚úÖ" if monitor['status'] == 1 else "‚ùå"
                    if monitor.get('maintenance', False):
                        status_emoji = "üîß"
                    
                    response += f"{status_emoji} {monitor['name']}"
                    if monitor.get('url'):
                        response += f" ({monitor['url']})"
                    response += "\n"
                
                await message.answer(response)
    except asyncio.TimeoutError:
        logger.error("–¢–∞–π–º–∞—É—Ç –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å–ø–∏—Å–∫–∞ –º–æ–Ω–∏—Ç–æ—Ä–æ–≤ –æ—Ç Uptime Kuma")
        await message.answer("üïí –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ –º–æ–Ω–∏—Ç–æ—Ä–æ–≤ –æ—Ç Uptime Kuma –≤–æ–≤—Ä–µ–º—è. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å–ø–∏—Å–∫–∞ –º–æ–Ω–∏—Ç–æ—Ä–æ–≤: {e}")
        await message.answer(f"‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: {str(e)}")

@dp.message(Command(commands=['incidents']))
async def list_incidents(message: Message):
    """–ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –∏–Ω—Ü–∏–¥–µ–Ω—Ç–æ–≤"""
    if not await is_authorized(message):
        return
    
    await message.answer("üîç –ü–æ–ª—É—á–∞—é —Å–ø–∏—Å–æ–∫ –∏–Ω—Ü–∏–¥–µ–Ω—Ç–æ–≤...")
    
    try:
        async with asyncio.timeout(30):
            logger.info("–°–æ–∑–¥–∞–Ω–∏–µ —ç–∫–∑–µ–º–ø–ª—è—Ä–∞ UptimeKumaClient...")
            async with UptimeKumaClient() as client:
                logger.info("–≠–∫–∑–µ–º–ø–ª—è—Ä UptimeKumaClient —Å–æ–∑–¥–∞–Ω. –í—ã–∑–æ–≤ get_incidents...")
                incidents = await client.get_incidents()
                logger.info("–ü–æ–ª—É—á–µ–Ω –æ—Ç–≤–µ—Ç –æ—Ç get_incidents.")
                
                if not incidents:
                    await message.answer("‚úÖ –ê–∫—Ç–∏–≤–Ω—ã—Ö –∏–Ω—Ü–∏–¥–µ–Ω—Ç–æ–≤ –Ω–µ—Ç.")
                    return
                
                response = "üö® –°–ø–∏—Å–æ–∫ –∏–Ω—Ü–∏–¥–µ–Ω—Ç–æ–≤:\n\n"
                
                for incident in incidents:
                    response += f"‚ö†Ô∏è {incident['title']}\n"
                    response += f"–ú–æ–Ω–∏—Ç–æ—Ä: {incident['monitor_name']}\n"
                    response += f"–°—Ç–∞—Ç—É—Å: {incident['status']}\n"
                    response += f"–ù–∞—á–∞–ª–æ: {incident['started_at']}\n"
                    if incident.get('resolved_at'):
                        response += f"–†–∞–∑—Ä–µ—à–µ–Ω–æ: {incident['resolved_at']}\n"
                    response += "\n"
                
                await message.answer(response)
    except asyncio.TimeoutError:
        logger.error("–¢–∞–π–º–∞—É—Ç –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å–ø–∏—Å–∫–∞ –∏–Ω—Ü–∏–¥–µ–Ω—Ç–æ–≤ –æ—Ç Uptime Kuma")
        await message.answer("üïí –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ –∏–Ω—Ü–∏–¥–µ–Ω—Ç–æ–≤ –æ—Ç Uptime Kuma –≤–æ–≤—Ä–µ–º—è. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å–ø–∏—Å–∫–∞ –∏–Ω—Ü–∏–¥–µ–Ω—Ç–æ–≤: {e}")
        await message.answer(f"‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: {str(e)}")

# --- –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è ---
async def initialize_app():
    """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ—Ç –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ, —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä—É–µ—Ç –∞–¥–º–∏–Ω–∞ –∏–∑ .env —Å –ë–î."""
    logger.info("–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è –∏ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞...")
    
    new_admin_id_str = os.getenv('ADMIN_CHAT_ID')
    new_admin_id: Optional[int] = None

    if new_admin_id_str:
        try:
            new_admin_id = int(new_admin_id_str)
        except ValueError:
            logger.error(f"–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç ADMIN_CHAT_ID: {new_admin_id_str}. –î–æ–ª–∂–Ω–æ –±—ã—Ç—å —Ü–µ–ª–æ–µ —á–∏—Å–ª–æ. –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ –ø—Ä–æ–ø—É—â–µ–Ω–∞.")
            new_admin_id = None # –°–±—Ä–∞—Å—ã–≤–∞–µ–º, —á—Ç–æ–±—ã –Ω–µ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞—Ç—å –¥–∞–ª—å—à–µ
    else:
        logger.warning("ADMIN_CHAT_ID –Ω–µ —É–∫–∞–∑–∞–Ω –≤ .env. –ü—Ä–æ–ø—É—Å–∫–∞–µ–º —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—é –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞. –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä –Ω–∞–∑–Ω–∞—á–µ–Ω –≤—Ä—É—á–Ω—É—é, –µ—Å–ª–∏ —ç—Ç–æ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ.")

    # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–∏—Ö –∞–¥–º–∏–Ω–æ–≤ –∏–∑ –ë–î
    current_admins = db_manager.get_users_by_role(UserRole.ADMIN)
    current_admin_ids = {admin['user_id'] for admin in current_admins}

    # 1. –î–µ–º–æ—É—Ç (–ø–æ–Ω–∏–∂–µ–Ω–∏–µ —Ä–æ–ª–∏) —Å—Ç–∞—Ä—ã—Ö –∞–¥–º–∏–Ω–æ–≤, –µ—Å–ª–∏ ID –∏–∑–º–µ–Ω–∏–ª—Å—è
    if new_admin_id is not None: # –ï—Å–ª–∏ –Ω–æ–≤—ã–π –∞–¥–º–∏–Ω –∑–∞–¥–∞–Ω
        for admin in current_admins:
            admin_id_db = admin['user_id']
            if admin_id_db != new_admin_id:
                logger.info(f"–û–±–Ω–∞—Ä—É–∂–µ–Ω–æ –∏–∑–º–µ–Ω–µ–Ω–∏–µ ADMIN_CHAT_ID. –ü–æ–Ω–∏–∂–µ–Ω–∏–µ —Ä–æ–ª–∏ –ø—Ä–µ–¥—ã–¥—É—â–µ–≥–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ {admin_id_db} –¥–æ USER.")
                # –ü–æ–Ω–∏–∂–∞–µ–º —Ä–æ–ª—å –¥–æ USER, —Å–æ—Ö—Ä–∞–Ω—è—è –∏–º—è/username
                db_manager.add_or_update_user(admin_id_db, UserRole.USER, name=admin.get('name'), username=admin.get('username'))
                current_admin_ids.remove(admin_id_db) # –£–±–∏—Ä–∞–µ–º –∏–∑ —Ç–µ–∫—É—â–∏—Ö, —á—Ç–æ–±—ã –Ω–µ –æ–±–Ω–æ–≤–ª—è—Ç—å –µ–≥–æ –∫–∞–∫ –∞–¥–º–∏–Ω–∞ –Ω–∏–∂–µ
    # –ï—Å–ª–∏ new_admin_id –Ω–µ –∑–∞–¥–∞–Ω, –Ω–µ —Ç—Ä–æ–≥–∞–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö –∞–¥–º–∏–Ω–æ–≤

    # 2. –ü—Ä–æ–º–æ—É—Ç (–ø–æ–≤—ã—à–µ–Ω–∏–µ —Ä–æ–ª–∏) –Ω–æ–≤–æ–≥–æ –∞–¥–º–∏–Ω–∞, –µ—Å–ª–∏ –æ–Ω –∑–∞–¥–∞–Ω
    if new_admin_id is not None and new_admin_id not in current_admin_ids:
        logger.info(f"–£—Å—Ç–∞–Ω–æ–≤–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {new_admin_id} –∫–∞–∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ —Å–æ–≥–ª–∞—Å–Ω–æ ADMIN_CHAT_ID.")
        try:
            # –ü—ã—Ç–∞–µ–º—Å—è –ø–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ –∏–∑ Telegram API
            try:
                admin_user_info = await bot.get_chat(new_admin_id)
                admin_name = admin_user_info.full_name
                admin_username = admin_user_info.username
            except Exception as e:
                logger.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ {new_admin_id} –∏–∑ Telegram API: {e}. –ò—Å–ø–æ–ª—å–∑—É–µ–º —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è.")
                admin_name = f"Admin_{new_admin_id}"
                admin_username = None
            
            # –î–æ–±–∞–≤–ª—è–µ–º –∏–ª–∏ –æ–±–Ω–æ–≤–ª—è–µ–º –∞–¥–º–∏–Ω–∞ –≤ –ë–î
            if db_manager.add_or_update_user(new_admin_id, UserRole.ADMIN, name=admin_name, username=admin_username):
                logger.info(f"–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä {admin_name} ({new_admin_id}) —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω/–æ–±–Ω–æ–≤–ª–µ–Ω –≤ –ë–î —Å —Ä–æ–ª—å—é ADMIN.")
            else:
                logger.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å –¥–æ–±–∞–≤–∏—Ç—å/–æ–±–Ω–æ–≤–∏—Ç—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ {new_admin_id} –≤ –ë–î.")
                
        except Exception as e:
            logger.error(f"–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –Ω–∞–∑–Ω–∞—á–µ–Ω–∏–∏ –Ω–æ–≤–æ–≥–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ ({new_admin_id}): {e}", exc_info=True)
    elif new_admin_id is not None:
         logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {new_admin_id} —É–∂–µ —è–≤–ª—è–µ—Ç—Å—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º.")

    logger.info("–°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞.")
# --- –ö–æ–Ω–µ—Ü –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ ---

async def main():
    await initialize_app()
    await dp.start_polling(bot)

if __name__ == '__main__':
    asyncio.run(main()) 
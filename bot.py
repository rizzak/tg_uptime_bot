from aiogram import Bot, Dispatcher
from aiogram.types import Message
from aiogram.filters import Command
import asyncio
from dotenv import load_dotenv
import os
import logging
from uptime_kuma_client import UptimeKumaClient

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s'
)
logger = logging.getLogger(__name__)

load_dotenv()  # –ó–∞–≥—Ä—É–∑–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è –∏–∑ .env

# –ü–æ–ª—É—á–µ–Ω–∏–µ –Ω–∞—Å—Ç—Ä–æ–µ–∫ –∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
API_TOKEN = os.getenv('TELEGRAM_BOT_TOKEN')
ALLOWED_CHAT_IDS = os.getenv('ALLOWED_CHAT_IDS', '').split(',')

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞ –∏ –¥–∏—Å–ø–µ—Ç—á–µ—Ä–∞
bot = Bot(token=API_TOKEN)
dp = Dispatcher()

# –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç—É–ø–∞
async def is_authorized(message: Message) -> bool:
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç, –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –±–æ—Ç–∞"""
    user_id = str(message.from_user.id)
    if user_id in ALLOWED_CHAT_IDS:
        return True
    await message.answer("–£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–º—É –±–æ—Ç—É.")
    return False

@dp.message(Command(commands=['start', 'help']))
async def send_welcome(message: Message):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥ /start –∏ /help"""
    if not await is_authorized(message):
        return
    
    await message.answer(
        "üëã –ü—Ä–∏–≤–µ—Ç! –Ø –±–æ—Ç –¥–ª—è –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ Uptime Kuma.\n\n"
        "–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:\n"
        "/status - –ü–æ–ª—É—á–∏—Ç—å –æ–±—â–∏–π —Å—Ç–∞—Ç—É—Å –≤—Å–µ—Ö —Å–µ—Ä–≤–∏—Å–æ–≤\n"
        "/monitors - –ü–æ–∫–∞–∑–∞—Ç—å —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –º–æ–Ω–∏—Ç–æ—Ä–æ–≤\n"
        "/incidents - –ü–æ–∫–∞–∑–∞—Ç—å —Å–ø–∏—Å–æ–∫ –∏–Ω—Ü–∏–¥–µ–Ω—Ç–æ–≤"
    )

@dp.message(Command(commands=['status']))
async def get_status(message: Message):
    """–ü–æ–ª—É—á–µ–Ω–∏–µ –æ–±—â–µ–≥–æ —Å—Ç–∞—Ç—É—Å–∞ –≤—Å–µ—Ö —Å–µ—Ä–≤–∏—Å–æ–≤"""
    if not await is_authorized(message):
        return
    
    await message.answer("üîç –ü–æ–ª—É—á–∞—é —Å—Ç–∞—Ç—É—Å —Å–µ—Ä–≤–∏—Å–æ–≤...")
    
    try:
        async with UptimeKumaClient() as client:
            # –ü–æ–ª—É—á–∞–µ–º —Å–≤–æ–¥–∫—É –ø–æ —Å—Ç–∞—Ç—É—Å—É
            summary = await client.get_status_summary()
            
            response = f"üìä –°—Ç–∞—Ç—É—Å —Å–µ—Ä–≤–∏—Å–æ–≤:\n\n"
            response += f"–í—Å–µ–≥–æ: {summary['total']}\n"
            response += f"‚úÖ –†–∞–±–æ—Ç–∞—é—Ç: {summary['up']}\n"
            response += f"‚ùå –ù–µ —Ä–∞–±–æ—Ç–∞—é—Ç: {summary['down']}\n"
            response += f"üîß –ù–∞ –æ–±—Å–ª—É–∂–∏–≤–∞–Ω–∏–∏: {summary['maintenance']}\n"
            response += f"üìà Uptime: {summary['uptime']}%\n"
            
            # –ï—Å–ª–∏ –µ—Å—Ç—å –Ω–µ—Ä–∞–±–æ—Ç–∞—é—â–∏–µ —Å–µ—Ä–≤–∏—Å—ã, –ø–æ–∫–∞–∂–µ–º –∏—Ö
            if summary['down'] > 0:
                response += "\n‚ö†Ô∏è –°–µ—Ä–≤–∏—Å—ã —Å –ø—Ä–æ–±–ª–µ–º–∞–º–∏:\n"
                
                # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –º–æ–Ω–∏—Ç–æ—Ä–æ–≤
                monitors = await client.get_monitors()
                for monitor in monitors:
                    if monitor['status'] == 0 and monitor['active'] and not monitor['maintenance']:
                        response += f"- {monitor['name']}\n"
            
            await message.answer(response)
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å—Ç–∞—Ç—É—Å–∞: {e}")
        await message.answer(f"‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: {str(e)}")

@dp.message(Command(commands=['monitors']))
async def list_monitors(message: Message):
    """–ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –≤—Å–µ—Ö –º–æ–Ω–∏—Ç–æ—Ä–æ–≤"""
    if not await is_authorized(message):
        return
    
    await message.answer("üîç –ü–æ–ª—É—á–∞—é —Å–ø–∏—Å–æ–∫ –º–æ–Ω–∏—Ç–æ—Ä–æ–≤...")
    
    try:
        async with UptimeKumaClient() as client:
            monitors = await client.get_monitors()
            
            if not monitors:
                await message.answer("‚ùó –ú–æ–Ω–∏—Ç–æ—Ä—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã.")
                return
            
            response = "üìã –°–ø–∏—Å–æ–∫ –º–æ–Ω–∏—Ç–æ—Ä–æ–≤:\n\n"
            
            for monitor in monitors:
                status_emoji = "‚úÖ" if monitor['status'] == 1 else "‚ùå"
                if monitor.get('maintenance', False):
                    status_emoji = "üîß"
                
                response += f"{status_emoji} {monitor['name']}"
                if monitor.get('url'):
                    response += f" ({monitor['url']})"
                response += "\n"
            
            await message.answer(response)
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å–ø–∏—Å–∫–∞ –º–æ–Ω–∏—Ç–æ—Ä–æ–≤: {e}")
        await message.answer(f"‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: {str(e)}")

@dp.message(Command(commands=['incidents']))
async def list_incidents(message: Message):
    """–ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –∏–Ω—Ü–∏–¥–µ–Ω—Ç–æ–≤"""
    if not await is_authorized(message):
        return
    
    await message.answer("üîç –ü–æ–ª—É—á–∞—é —Å–ø–∏—Å–æ–∫ –∏–Ω—Ü–∏–¥–µ–Ω—Ç–æ–≤...")
    
    try:
        async with UptimeKumaClient() as client:
            incidents = await client.get_incidents()
            
            if not incidents:
                await message.answer("‚úÖ –ê–∫—Ç–∏–≤–Ω—ã—Ö –∏–Ω—Ü–∏–¥–µ–Ω—Ç–æ–≤ –Ω–µ—Ç.")
                return
            
            response = "üö® –°–ø–∏—Å–æ–∫ –∏–Ω—Ü–∏–¥–µ–Ω—Ç–æ–≤:\n\n"
            
            for incident in incidents:
                response += f"‚ö†Ô∏è {incident['title']}\n"
                response += f"–ú–æ–Ω–∏—Ç–æ—Ä: {incident['monitor_name']}\n"
                response += f"–°—Ç–∞—Ç—É—Å: {incident['status']}\n"
                response += f"–ù–∞—á–∞–ª–æ: {incident['started_at']}\n"
                if incident.get('resolved_at'):
                    response += f"–†–∞–∑—Ä–µ—à–µ–Ω–æ: {incident['resolved_at']}\n"
                response += "\n"
            
            await message.answer(response)
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å–ø–∏—Å–∫–∞ –∏–Ω—Ü–∏–¥–µ–Ω—Ç–æ–≤: {e}")
        await message.answer(f"‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: {str(e)}")

async def main():
    await dp.start_polling(bot)

if __name__ == '__main__':
    asyncio.run(main()) 